async function testCompleteFlow() {
  try {
    console.log('üéØ Complete Hodo Stay Backend Flow Test\n');
    
    const baseURL = 'http://localhost:5000/api';
    
    // Step 1: Test Buildings API
    console.log('1Ô∏è‚É£ Testing Buildings API...');
    const buildingsResponse = await fetch(`${baseURL}/buildings`);
    const buildingsData = await buildingsResponse.json();
    
    if (buildingsData.success && buildingsData.data.buildings.length > 0) {
      const building = buildingsData.data.buildings[0];
      console.log(`   ‚úÖ Found building: ${building.name}`);
      console.log(`   üìä Units available: ${building.availableUnits}`);
      
      // Step 2: Test Building Details API
      console.log('\n2Ô∏è‚É£ Testing Building Details API...');
      const buildingDetailResponse = await fetch(`${baseURL}/buildings/${building.buildingId}`);
      const buildingDetailData = await buildingDetailResponse.json();
      
      if (buildingDetailData.success && buildingDetailData.data.building.units.length > 0) {
        const unit = buildingDetailData.data.building.units[0];
        console.log(`   ‚úÖ Found unit: ${unit.name}`);
        console.log(`   üè† Unit ID: ${unit._id}`);
        
        // Step 3: Test Unit Details API
        console.log('\n3Ô∏è‚É£ Testing Unit Details API...');
        const unitDetailResponse = await fetch(`${baseURL}/units/${unit._id}`);
        const unitDetailData = await unitDetailResponse.json();
        
        if (unitDetailData.success) {
          console.log(`   ‚úÖ Unit details loaded: ${unitDetailData.data.unit.name}`);
          
          // Step 4: Test User Creation
          console.log('\n4Ô∏è‚É£ Testing User Creation...');
          const userData = {
            firstName: 'John',
            lastName: 'Doe',
            email: 'john.doe@example.com',
            phone: '+1234567890',
            address: {
              street: '123 Main St',
              city: 'New York',
              state: 'NY',
              zipCode: '10001',
              country: 'USA'
            }
          };
          
          const userResponse = await fetch(`${baseURL}/users`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userData)
          });
          const userResult = await userResponse.json();
          
          if (userResult.success) {
            console.log(`   ‚úÖ User created: ${userResult.data.user.fullName}`);
            
            // Step 5: Test Booking Creation
            console.log('\n5Ô∏è‚É£ Testing Booking Creation...');
            const bookingData = {
              userId: userResult.data.user._id,
              unitId: unit._id,
              checkInDate: '2025-01-15',
              checkOutDate: '2025-01-18',
              guests: {
                adults: 2,
                children: 0
              },
              pricing: {
                basePrice: 100,
                nights: 3,
                subtotal: 300,
                taxes: 30,
                fees: {
                  cleaningFee: 25,
                  serviceFee: 15
                },
                totalAmount: 370,
                currency: 'USD'
              },
              guestInfo: {
                firstName: 'John',
                lastName: 'Doe',
                email: 'john.doe@example.com',
                phone: '+1234567890'
              },
              specialRequests: 'Late check-in requested'
            };
            
            const bookingResponse = await fetch(`${baseURL}/bookings`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(bookingData)
            });
            const bookingResult = await bookingResponse.json();
            
            if (bookingResult.success) {
              console.log(`   ‚úÖ Booking created: ${bookingResult.data.booking.bookingReference}`);
              console.log(`   üí∞ Total amount: $${bookingResult.data.booking.pricing.totalAmount}`);
              
              // Step 6: Test Booking Retrieval
              console.log('\n6Ô∏è‚É£ Testing Booking Retrieval...');
              const bookingId = bookingResult.data.booking._id;
              const getBookingResponse = await fetch(`${baseURL}/bookings/${bookingId}`);
              const getBookingResult = await getBookingResponse.json();
              
              if (getBookingResult.success) {
                console.log(`   ‚úÖ Booking retrieved: ${getBookingResult.data.booking.bookingReference}`);
                console.log(`   üìÖ Dates: ${new Date(getBookingResult.data.booking.checkInDate).toDateString()} - ${new Date(getBookingResult.data.booking.checkOutDate).toDateString()}`);
                
                console.log('\nüéâ COMPLETE FLOW TEST SUCCESSFUL!');
                console.log('\nüìã API Endpoints Working:');
                console.log('   ‚úÖ GET /api/buildings - List property groups');
                console.log('   ‚úÖ GET /api/buildings/:id - Building details with units');
                console.log('   ‚úÖ GET /api/units/:id - Unit details');
                console.log('   ‚úÖ POST /api/users - Create/get user');
                console.log('   ‚úÖ POST /api/bookings - Create booking');
                console.log('   ‚úÖ GET /api/bookings/:id - Get booking details');
                
                console.log('\nüöÄ Ready for Frontend Integration!');
                
              } else {
                console.log('   ‚ùå Booking retrieval failed');
              }
            } else {
              console.log('   ‚ùå Booking creation failed:', bookingResult.message);
            }
          } else {
            console.log('   ‚ùå User creation failed:', userResult.message);
          }
        } else {
          console.log('   ‚ùå Unit details failed');
        }
      } else {
        console.log('   ‚ùå Building details failed');
      }
    } else {
      console.log('   ‚ùå Buildings API failed - need to sync data first');
      console.log('   üí° Try: GET /api/buildings?forceSync=true');
    }
    
  } catch (error) {
    console.error('‚ùå Flow test failed:', error.message);
  }
}

// Run the complete flow test
testCompleteFlow();